// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER)

  account      Account[]
  sessions     Session[]
  profile      Profile?
  articles     Article[]
  comments     Comment[]
  likes        Like[]
  CommentLikes CommentLike[]
  recruitments Recruitment[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Profile {
  id      String    @id @default(cuid())
  about   String?
  dob     DateTime?
  address String?
  contact String?
  user    User      @relation(fields: [userId], references: [id])
  userId  String    @unique
}

model Article {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  description String?
  content     String
  featured    Boolean   @default(false)
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
  likes       Like[]
  tags        Tag[]
}

model Category {
  id          String    @id @default(cuid())
  slug        String?
  name        String    @unique
  description String?
  image       String?
  articles    Article[]
}

model Tag {
  id           String        @id @default(cuid())
  slug         String?
  name         String        @unique
  articles     Article[]
  recruitments Recruitment[]
}

model Comment {
  id            String       @id @default(cuid())
  content       String
  createdAt     DateTime     @default(now())
  author        User         @relation(fields: [authorId], references: [id])
  authorId      String
  article       Article?     @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId     String?
  recruitment   Recruitment? @relation(fields: [recruitmentId], references: [id])
  recruitmentId String?
  replyToId     String?
  replyTo       Comment?     @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies       Comment[]    @relation("ReplyTo")

  likes     CommentLike[]
  commentId String?
}

model Like {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String

  @@id([userId, articleId])
}

model CommentLike {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}

model Recruitment {
  id               String     @id @default(cuid())
  slug             String
  title            String
  description      String?
  image            String?
  post             String?
  startDate        DateTime?
  endDate          DateTime?
  vacancy          String?
  salary           String?
  minQualification String?
  link             String?
  createdAt        DateTime   @default(now())
  featured         Boolean    @default(false)
  author           User?      @relation(fields: [authorId], references: [id])
  authorId         String?
  authority        Authority? @relation(fields: [authorityId], references: [id])
  authorityId      String?
  tags             Tag[]
  comments         Comment[]
}

model Authority {
  id           String        @id @default(cuid())
  slug         String
  name         String
  website      String?
  image        String?
  description  String?
  recruitments Recruitment[]
}

model Case {
  id             String       @id @default(cuid())
  slug           String
  title          String?
  description    String?
  caseNo         String
  petitioner     String?
  respondent     String?
  caseFile       String?
  caseCategory   CaseCategory @relation(fields: [caseCategoryId], references: [id])
  caseCategoryId String
  orders         CaseOrder[]
}

model CaseCategory {
  id    String @id @default(cuid())
  title String
  cases Case[]
}

model CaseOrder {
  id     String   @id @default(cuid())
  date   DateTime
  file   String?
  case   Case     @relation(fields: [caseId], references: [id])
  caseId String
}

enum Role {
  USER
  ADMIN
  AUTHOR
  MEMBER
}
